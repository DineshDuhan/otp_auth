package com.example1.android.guruji;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.FirebaseException;
import com.google.firebase.FirebaseTooManyRequestsException;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.PhoneAuthCredential;
import com.google.firebase.auth.PhoneAuthOptions;
import com.google.firebase.auth.PhoneAuthProvider;

import java.util.concurrent.TimeUnit;

public class PhoneAuthActivity extends AppCompatActivity implements View.OnClickListener{

    private static final String TAG = "PhoneAuthActivity";

    private static final String KEY_VERIFY_IN_PROGRESS = "key_verify_in_progress";

    private static final int STATE_INITIALIZED = 1;
    private static final int STATE_CODE_SENT = 2;
    private static final int STATE_VERIFY_FAILED = 3;
    private static final int STATE_VERIFY_SUCCESS = 4;
    private static final int STATE_SIGNIN_FAILED = 5;
    private static final int STATE_SIGNIN_SUCCESS = 6;
    MaterialButton buttonStartVerification,buttonVerifyPhone,buttonResend,signOutButton;
    public EditText fieldVerificationCoder,fieldPhoneNumber;
    public TextView detail,status;
    LinearLayout phoneAuthFields,signedInButtons;
    // [START declare_auth]
    private FirebaseAuth mAuth;
    // [END declare_auth]
   private String code;
    private boolean mVerificationInProgress = false;
    private String mVerificationId;
    private PhoneAuthProvider.ForceResendingToken mResendToken;
    private PhoneAuthProvider.OnVerificationStateChangedCallbacks mCallbacks;
   private ProgressDialog dialognumber,dialogcode,dialogresend;
   // private ActivityPhoneAuthBinding mBinding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_phone_auth);
        if (savedInstanceState != null) {
            onRestoreInstanceState(savedInstanceState);
        }
        buttonStartVerification = (MaterialButton) findViewById(R.id.buttonStartVerification);
        buttonVerifyPhone = (MaterialButton) findViewById(R.id.buttonVerifyPhone);
        buttonResend = (MaterialButton) findViewById(R.id.buttonResend);
        signOutButton = (MaterialButton) findViewById(R.id.signOutButton);

        fieldPhoneNumber = (EditText)findViewById(R.id.fieldPhoneNumber);
        fieldVerificationCoder = (EditText)findViewById(R.id.fieldVerificationCode);

        requestSMSPermission();


        detail = (TextView)findViewById(R.id.detail);
        status = (TextView)findViewById(R.id.status);

        dialognumber = new ProgressDialog(PhoneAuthActivity.this);
        dialognumber.setMessage("Verifying Number....");
        dialognumber.setCanceledOnTouchOutside(false);
        dialognumber.setCancelable(false);

        dialogcode = new ProgressDialog(PhoneAuthActivity.this);
        dialogcode.setMessage("Wait....");
        dialogcode.setCancelable(false);
        dialogcode.setCanceledOnTouchOutside(false);

        dialogresend = new ProgressDialog(PhoneAuthActivity.this);
        dialogresend.setMessage("Sending Again");
        dialogresend.setCanceledOnTouchOutside(false);
        dialogresend.setCancelable(false);

   // buttonStartVerification.setOnClickListener(this);


     signOutButton.setOnClickListener(this);

        mAuth = FirebaseAuth.getInstance();

        FirebaseUser currentUser = mAuth.getCurrentUser();
        //  updateUI(currentUser);
        if(currentUser !=null){
            Intent i = new Intent(PhoneAuthActivity.this,Dash.class);
            startActivity(i);
        }

        phoneAuthFields = (LinearLayout)findViewById(R.id.phoneAuthFields);
        signedInButtons = (LinearLayout)findViewById(R.id.signedInButtons);
        // [END initialize_auth]

        // Initialize phone auth callbacks
        // [START phone_auth_callbacks]
        mCallbacks = new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {

            @Override
            public void onVerificationCompleted(PhoneAuthCredential credential) {
                // This callback will be invoked in two situations:
                // 1 - Instant verification. In some cases the phone number can be instantly
                //     verified without needing to send or enter a verification code.
                // 2 - Auto-retrieval. On some devices Google Play services can automatically
                //     detect the incoming verification SMS and perform verification without
                //     user action.
                Log.d(TAG, "onVerificationCompleted:" + credential);
                // [START_EXCLUDE silent]
                 mVerificationInProgress = false;
                // [END_EXCLUDE]

                // [START_EXCLUDE silent]
                // Update the UI and attempt sign in with the phone credential
                updateUI(STATE_VERIFY_SUCCESS, credential);
                // [END_EXCLUDE]
                signInWithPhoneAuthCredential(credential);
            }

            @Override
            public void onVerificationFailed(FirebaseException e) {
                // This callback is invoked in an invalid request for verification is made,
                // for instance if the the phone number format is not valid.
                Log.w(TAG, "onVerificationFailed", e);
                // [START_EXCLUDE silent]
                 mVerificationInProgress = false;
                // [END_EXCLUDE]

                if (e instanceof FirebaseAuthInvalidCredentialsException) {
                    // Invalid request
                    // [START_EXCLUDE]
                    fieldPhoneNumber.setError("Invalid phone number.");
                    // [END_EXCLUDE]
                } else if (e instanceof FirebaseTooManyRequestsException) {
                    // The SMS quota for the project has been exceeded
                    // [START_EXCLUDE]
                    Snackbar.make(findViewById(android.R.id.content), "Quota exceeded.",
                            Snackbar.LENGTH_SHORT).show();
                    // [END_EXCLUDE]
                }
                dialognumber.dismiss();
                dialogresend.dismiss();
                // Show a message and update the UI
                // [START_EXCLUDE]
                updateUI(STATE_VERIFY_FAILED);
                // [END_EXCLUDE]
            }
            @Override
            public void onCodeSent(@NonNull String verificationId,
                                   @NonNull PhoneAuthProvider.ForceResendingToken token) {
                // The SMS verification code has been sent to the provided phone number, we
                // now need to ask the user to enter the code and then construct a credential
                // by combining the code with a verification ID.
                Log.d(TAG, "onCodeSent:" + verificationId);

                // Save verification ID and resending token so we can use them later
                mVerificationId = verificationId;
                mResendToken = token;
                 dialognumber.dismiss();
                 dialogresend.dismiss();
                 buttonVerifyPhone.setVisibility(View.VISIBLE);
                 buttonResend.setVisibility(View.VISIBLE);
                 fieldPhoneNumber.setVisibility(View.GONE);
                 fieldVerificationCoder.setVisibility(View.VISIBLE);
                 buttonStartVerification.setVisibility(View.GONE);
                 enableViews(fieldVerificationCoder);
                 new otp_receiver().setEditText(fieldVerificationCoder);

                // [START_EXCLUDE]
                // Update UI

                updateUI(STATE_CODE_SENT);

                // [END_EXCLUDE]
            }
        };
        // [END phone_auth_callbacks]

    }



    // [START on_start_check_user]
    @Override
    public void onStart() {
        super.onStart();
        // Check if user is signed in (non-null) and update UI accordingly.
        FirebaseUser currentUser = mAuth.getCurrentUser();
      //  updateUI(currentUser);
           if(currentUser !=null){
               Intent i = new Intent(PhoneAuthActivity.this,Dash.class);
               startActivity(i);
           }
        // [START_EXCLUDE]
      /*  if (mVerificationInProgress && validatePhoneNumber()) {
            startPhoneNumberVerification(fieldPhoneNumber.getText().toString());
        }

       */
      if(mVerificationInProgress == true){
          fieldVerificationCoder.setVisibility(View.VISIBLE);
          fieldPhoneNumber.setVisibility(View.GONE);
          buttonStartVerification.setVisibility(View.GONE);
          buttonResend.setVisibility(View.VISIBLE);
          buttonVerifyPhone.setVisibility(View.VISIBLE);

          enableViews(buttonResend,buttonVerifyPhone, fieldVerificationCoder);

      }
        // [END_EXCLUDE]
    }
    // [END on_start_check_user]
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putBoolean(KEY_VERIFY_IN_PROGRESS, mVerificationInProgress);
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        mVerificationInProgress = savedInstanceState.getBoolean(KEY_VERIFY_IN_PROGRESS);
    }


    private void startPhoneNumberVerification(String phoneNumber) {

        // [START start_phone_auth]
        PhoneAuthOptions options =
                PhoneAuthOptions.newBuilder(mAuth)
                        .setPhoneNumber(phoneNumber)       // Phone number to verify
                        .setTimeout(60L, TimeUnit.SECONDS) // Timeout and unit
                        .setActivity(this)                 // Activity (for callback binding)
                        .setCallbacks(mCallbacks)          // OnVerificationStateChangedCallbacks
                        .build();
        PhoneAuthProvider.verifyPhoneNumber(options);
        // [END start_phone_auth]

        mVerificationInProgress = true;
    }

    private void verifyPhoneNumberWithCode(String verificationId, String code) {
        // [START verify_with_code]
        PhoneAuthCredential credential = PhoneAuthProvider.getCredential(verificationId, code);
        // [END verify_with_code]
        signInWithPhoneAuthCredential(credential);
    }

    // [START resend_verification]
    private void resendVerificationCode(String phoneNumber,
                                        PhoneAuthProvider.ForceResendingToken token) {
        PhoneAuthOptions options =
                PhoneAuthOptions.newBuilder(mAuth)
                        .setPhoneNumber(phoneNumber)       // Phone number to verify
                        .setTimeout(60L, TimeUnit.SECONDS) // Timeout and unit
                        .setActivity(this)                 // Activity (for callback binding)
                        .setCallbacks(mCallbacks)          // OnVerificationStateChangedCallbacks
                        .setForceResendingToken(token)     // ForceResendingToken from callbacks
                        .build();
        PhoneAuthProvider.verifyPhoneNumber(options);
    }
    // [END resend_verification]

    // [START sign_in_with_phone]
    private void signInWithPhoneAuthCredential(PhoneAuthCredential credential) {
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (task.isSuccessful()) {
                            // Sign in success, update UI with the signed-in user's information
                            Log.d(TAG, "signInWithCredential:success");

                            FirebaseUser user = task.getResult().getUser();
                            // [START_EXCLUDE]
                            updateUI(STATE_SIGNIN_SUCCESS, user);
                            // [END_EXCLUDE]
                        } else {
                            // Sign in failed, display a message and update the UI
                            Log.w(TAG, "signInWithCredential:failure", task.getException());
                            if (task.getException() instanceof FirebaseAuthInvalidCredentialsException) {
                                // The verification code entered was invalid
                                // [START_EXCLUDE silent]
                                fieldVerificationCoder.setError("Invalid code.");

                                // [END_EXCLUDE]
                              }
                            // [START_EXCLUDE silent]
                            // Update UI
                            updateUI(STATE_SIGNIN_FAILED);
                            // [END_EXCLUDE]
                        }
                    }
                });
    }
    // [END sign_in_with_phone]

    private void signOut() {
        mAuth.signOut();
        updateUI(STATE_INITIALIZED);

    }

    private void updateUI(int uiState) {
        updateUI(uiState, mAuth.getCurrentUser(), null);
    }

    private void updateUI(FirebaseUser user) {
        if (user != null) {
            updateUI(STATE_SIGNIN_SUCCESS, user);
        } else {
            updateUI(STATE_INITIALIZED);
        }
    }

    private void updateUI(int uiState, FirebaseUser user) {
        updateUI(uiState, user, null);
    }

    private void updateUI(int uiState, PhoneAuthCredential cred) {
        updateUI(uiState, null, cred);
    }

    private void updateUI(int uiState, FirebaseUser user, PhoneAuthCredential cred) {
        switch (uiState) {
            case STATE_INITIALIZED:
                // Initialized state, show only the phone number field and start button
                enableViews(buttonStartVerification, fieldPhoneNumber);
                disableViews(buttonVerifyPhone, buttonResend, fieldVerificationCoder);
                fieldVerificationCoder.setVisibility(View.GONE);
                fieldPhoneNumber.setVisibility(View.VISIBLE);
                buttonStartVerification.setVisibility(View.VISIBLE);
                buttonResend.setVisibility(View.GONE);
                buttonVerifyPhone.setVisibility(View.GONE);
                detail.setText(null);
                break;
            case STATE_CODE_SENT:
                // Code sent state, show the verification field, the
                enableViews(buttonVerifyPhone, buttonResend, fieldPhoneNumber,fieldVerificationCoder);
                disableViews(buttonStartVerification);

                detail.setText("code_sent");

                break;
            case STATE_VERIFY_FAILED:
                // Verification has failed, show all options
                enableViews(buttonStartVerification, buttonVerifyPhone,buttonResend,fieldPhoneNumber,fieldVerificationCoder);
                      detail.setText("verification_failed");
                break;
            case STATE_VERIFY_SUCCESS:
                // Verification has succeeded, proceed to firebase sign in
                disableViews(buttonStartVerification, buttonVerifyPhone, buttonResend,fieldPhoneNumber,fieldVerificationCoder);
                    detail.setText("verification_succeeded");

                // Set the verification text based on the credential
                if (cred != null) {
                    if (cred.getSmsCode() != null) {
                        fieldVerificationCoder.setText(cred.getSmsCode());
                    } else {
                        fieldVerificationCoder.setText("(instant validation)");
                    }
                }

                break;
            case STATE_SIGNIN_FAILED:
                // No-op, handled by sign-in check
                detail.setText("sign_in_failed");
                break;
            case STATE_SIGNIN_SUCCESS:
                 dialogcode.dismiss();
                break;
        }

        if (user == null) {
            // Signed out
            phoneAuthFields.setVisibility(View.VISIBLE);
            signedInButtons.setVisibility(View.GONE);

             status.setText("signed_out");
        } else {
            // Signed in
            Intent i = new Intent(PhoneAuthActivity.this,shop_details.class);
            startActivity(i);
            finish();
            phoneAuthFields.setVisibility(View.GONE);


             enableViews(fieldPhoneNumber,fieldVerificationCoder);
             fieldPhoneNumber.setText(null);
            fieldVerificationCoder.setText(null);

            status.setText("signed_in");
            detail.setText(getString(R.string.firebase_status_fmt, user.getUid()));
        }
    }

    private boolean validatePhoneNumber() {
        String phoneNumber = fieldPhoneNumber.getText().toString();
        if (TextUtils.isEmpty(phoneNumber)) {
            fieldPhoneNumber.setError("Invalid phone number.");
            return false;
        }

        return true;
    }

    private void enableViews(View... views) {
        for (View v : views) {
            v.setEnabled(true);
        }
    }

    private void disableViews(View... views) {
        for (View v : views) {
            v.setEnabled(false);
        }
    }

    @Override
    public void onClick(View view) {

        switch (view.getId()) {

            case R.id.signOutButton:
                signOut();
                break;
        }
    }

    public void validate_phone_number(View view) {
        dialognumber.show();

        if (!validatePhoneNumber()) {
            dialognumber.dismiss();
            return;
        }
        String temp = "+91 ";
        temp += fieldPhoneNumber.getText().toString();

        startPhoneNumberVerification(temp);

    }

    @Override
    public void onBackPressed() {
        if(mVerificationInProgress == true){
            Toast.makeText(PhoneAuthActivity.this, "You Can not Exit", Toast.LENGTH_SHORT).show();
        }
        else {
            super.onBackPressed();
        }
    }

    public void verify_otp(View view) {
        dialogcode.show();
            code = fieldVerificationCoder.getText().toString();

        Toast.makeText(PhoneAuthActivity.this, ""+ code, Toast.LENGTH_SHORT).show();
        if (TextUtils.isEmpty(code)) {
            fieldVerificationCoder.setError("Cannot be empty.");
            return;
        }

        verifyPhoneNumberWithCode(mVerificationId, code);
    }
// automatic verify
    public void  verify(){
        dialogcode.show();
        code = fieldVerificationCoder.getText().toString();

        Toast.makeText(PhoneAuthActivity.this, ""+ code, Toast.LENGTH_SHORT).show();
        if (TextUtils.isEmpty(code)) {
            fieldVerificationCoder.setError("Cannot be empty.");
            return;
        }

        verifyPhoneNumberWithCode(mVerificationId, code);
    }

    public void resend_code(View view) {
        dialogresend.show();
        String temp2 = "+91 ";
        temp2 += fieldPhoneNumber.getText().toString();
        resendVerificationCode(temp2, mResendToken);
    }

    private void requestSMSPermission() {
        String permission = Manifest.permission.RECEIVE_SMS;

        int grant = ContextCompat.checkSelfPermission(this,permission);
        if(grant != PackageManager.PERMISSION_GRANTED){
            String[] permission_list = new String[1];
            permission_list[0] = permission;

            ActivityCompat.requestPermissions(this,permission_list,1);
        }
    }
}
